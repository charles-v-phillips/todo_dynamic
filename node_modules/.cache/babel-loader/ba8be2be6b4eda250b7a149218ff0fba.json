{"ast":null,"code":"var _jsxFileName = \"/Users/charlesphillips/berg/sixth-st-coding-challenge/src/components/ToDoList.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ToDoListElement({\n  id,\n  text,\n  completed\n}) {\n  _s();\n  const [status, setStatus] = useState(completed);\n  let completed_text;\n  if (completed) {\n    completed_text = \"Completed\";\n  } else {\n    completed_text = \"In Progress\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: task.completed,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this), id, \" \", text, \" \", completed_text]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 12\n  }, this);\n}\n_s(ToDoListElement, \"fRiNKZFGz5K9T23A2CSgvemoKLo=\");\n_c = ToDoListElement;\nfunction ToDoList() {\n  _s2();\n  const [text, setText] = useState(\"\");\n  const [tasks, setTasks] = useState([{\n    id: 1,\n    text: 'Doctor Appointment',\n    completed: true\n  }, {\n    id: 2,\n    text: 'Meeting at School',\n    completed: false\n  }]);\n  function addTask(text) {\n    const t = {\n      id: Date.now(),\n      text,\n      completed: false\n    };\n    setTasks([t, ...tasks]);\n    setText(\"\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: text,\n      onChange: e => setText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addTask(text),\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 2\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(ToDoListElement, {\n      id: task.id,\n      text: task.text,\n      completed: task.completed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 26\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 12\n  }, this);\n}\n_s2(ToDoList, \"d3mPtN0/As+aPMvRwnFSBFtoWQg=\");\n_c2 = ToDoList;\nexport default ToDoList;\nvar _c, _c2;\n$RefreshReg$(_c, \"ToDoListElement\");\n$RefreshReg$(_c2, \"ToDoList\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","ToDoListElement","id","text","completed","_s","status","setStatus","completed_text","children","type","checked","task","onChange","handleChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","ToDoList","_s2","setText","tasks","setTasks","addTask","t","Date","now","value","e","target","onClick","map","_c2","$RefreshReg$"],"sources":["/Users/charlesphillips/berg/sixth-st-coding-challenge/src/components/ToDoList.js"],"sourcesContent":["import {useState} from \"react\"\n\nfunction ToDoListElement({\n    id,\n    text,\n    completed,\n}){\n    const [status, setStatus] = useState(completed)\n    let completed_text\n    if (completed){\n        completed_text = \"Completed\";}\n    else{\n        completed_text = \"In Progress\";\n    }\n    return <div>\n        <input \n type=\"checkbox\"\n checked={task.completed}\n onChange={handleChange}\n />\n        {id} {text} {completed_text}\n    </div>\n}\n\nfunction ToDoList(){\n    const [text, setText] = useState(\"\")\n    const [tasks, setTasks] = useState([\n        {\n        id: 1,\n        text: 'Doctor Appointment',\n        completed: true\n        },\n        {\n        id: 2,\n        text: 'Meeting at School',\n        completed: false\n        }\n        ]);\n    \n\n\n        \n    function addTask(text){\n        const t = {id: Date.now(), text,completed:false}\n        setTasks([t,...tasks])\n        setText(\"\")\n    }\n        \n    return <div>\n        <input\n value={text}\n onChange={e => setText(e.target.value)} \n />\n <button onClick={() => addTask(text)}>Add</button>\n        {\n        tasks.map(task =><ToDoListElement id={task.id} text={task.text} completed={task.completed} />)}\n        </div>;\n\n    \n}\n\nexport default ToDoList;"],"mappings":";;;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,eAAeA,CAAC;EACrBC,EAAE;EACFC,IAAI;EACJC;AACJ,CAAC,EAAC;EAAAC,EAAA;EACE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAACM,SAAS,CAAC;EAC/C,IAAII,cAAc;EAClB,IAAIJ,SAAS,EAAC;IACVI,cAAc,GAAG,WAAW;EAAC,CAAC,MAC9B;IACAA,cAAc,GAAG,aAAa;EAClC;EACA,oBAAOR,OAAA;IAAAS,QAAA,gBACHT,OAAA;MACPU,IAAI,EAAC,UAAU;MACfC,OAAO,EAAEC,IAAI,CAACR,SAAU;MACxBS,QAAQ,EAAEC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,EACMhB,EAAE,EAAC,GAAC,EAACC,IAAI,EAAC,GAAC,EAACK,cAAc;EAAA;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AACV;AAACb,EAAA,CApBQJ,eAAe;AAAAkB,EAAA,GAAflB,eAAe;AAsBxB,SAASmB,QAAQA,CAAA,EAAE;EAAAC,GAAA;EACf,MAAM,CAAClB,IAAI,EAAEmB,OAAO,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,CAC/B;IACAI,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,oBAAoB;IAC1BC,SAAS,EAAE;EACX,CAAC,EACD;IACAF,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,mBAAmB;IACzBC,SAAS,EAAE;EACX,CAAC,CACA,CAAC;EAKN,SAASqB,OAAOA,CAACtB,IAAI,EAAC;IAClB,MAAMuB,CAAC,GAAG;MAACxB,EAAE,EAAEyB,IAAI,CAACC,GAAG,CAAC,CAAC;MAAEzB,IAAI;MAACC,SAAS,EAAC;IAAK,CAAC;IAChDoB,QAAQ,CAAC,CAACE,CAAC,EAAC,GAAGH,KAAK,CAAC,CAAC;IACtBD,OAAO,CAAC,EAAE,CAAC;EACf;EAEA,oBAAOtB,OAAA;IAAAS,QAAA,gBACHT,OAAA;MACP6B,KAAK,EAAE1B,IAAK;MACZU,QAAQ,EAAEiB,CAAC,IAAIR,OAAO,CAACQ,CAAC,CAACC,MAAM,CAACF,KAAK;IAAE;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eACFlB,OAAA;MAAQgC,OAAO,EAAEA,CAAA,KAAMP,OAAO,CAACtB,IAAI,CAAE;MAAAM,QAAA,EAAC;IAAG;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAE3CK,KAAK,CAACU,GAAG,CAACrB,IAAI,iBAAGZ,OAAA,CAACC,eAAe;MAACC,EAAE,EAAEU,IAAI,CAACV,EAAG;MAACC,IAAI,EAAES,IAAI,CAACT,IAAK;MAACC,SAAS,EAAEQ,IAAI,CAACR;IAAU;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzF,CAAC;AAGd;AAACG,GAAA,CAnCQD,QAAQ;AAAAc,GAAA,GAARd,QAAQ;AAqCjB,eAAeA,QAAQ;AAAC,IAAAD,EAAA,EAAAe,GAAA;AAAAC,YAAA,CAAAhB,EAAA;AAAAgB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}